// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_AGENT_PROPERTIES_H_
#define _BEHAVIAC_AGENT_PROPERTIES_H_

#include "behaviac_agent_headers.h"
#include "behaviac_agent_member_visitor.h"
#include "behaviac_customized_types.h"

namespace behaviac
{
	// ---------------------------------------------------------------------
	// Delegate methods
	// ---------------------------------------------------------------------

	inline void FunctionPointer_behaviac_Agent_LogMessage(char* param0) { behaviac::Agent::LogMessage(param0); }

	inline void Set_Enemy_enemyType(Agent* self, int value) { ((Enemy*)self)->enemyType = value; };
	inline const void* Get_Enemy_enemyType(Agent* self) { return &((Enemy*)self)->enemyType; };

	inline void Set_Enemy_initSpeed(Agent* self, float value) { ((Enemy*)self)->initSpeed = value; };
	inline const void* Get_Enemy_initSpeed(Agent* self) { return &((Enemy*)self)->initSpeed; };

	inline void Set_Enemy_m_init_speed(Agent* self, behaviac::vector<float> value) { ((Enemy*)self)->m_init_speed = value; };
	inline const void* Get_Enemy_m_init_speed(Agent* self) { return &((Enemy*)self)->m_init_speed; };

	inline void Set_Enemy_m_init_speed(Agent* self, float value, int index) { ((Enemy*)self)->m_init_speed[index] = value; };
	inline const void* Get_Enemy_m_init_speed(Agent* self, int index) { return &((Enemy*)self)->m_init_speed[index]; };

	inline void Set_Enemy_randomSpeed(Agent* self, float value) { ((Enemy*)self)->randomSpeed = value; };
	inline const void* Get_Enemy_randomSpeed(Agent* self) { return &((Enemy*)self)->randomSpeed; };

	inline int FunctionPointer_Enemy_getEnemyType(Agent* self) { return (int)((Enemy*)self)->_Execute_Method_<METHOD_TYPE_Enemy_getEnemyType, int >(); }
	inline float FunctionPointer_Enemy_getRandomSpeedByInitSpeed(Agent* self, float param0) { return (float)((Enemy*)self)->_Execute_Method_<METHOD_TYPE_Enemy_getRandomSpeedByInitSpeed, float, float >(param0); }
	inline float FunctionPointer_Enemy_getSpeed(Agent* self) { return (float)((Enemy*)self)->_Execute_Method_<METHOD_TYPE_Enemy_getSpeed, float >(); }
	inline bool FunctionPointer_Enemy_isAlive(Agent* self) { return (bool)((Enemy*)self)->_Execute_Method_<METHOD_TYPE_Enemy_isAlive, bool >(); }
	inline void FunctionPointer_Enemy_LogMessage(char* param0) { Enemy::LogMessage(param0); }
	inline void FunctionPointer_Enemy_setSpeed(Agent* self, float param0) { ((Enemy*)self)->_Execute_Method_<METHOD_TYPE_Enemy_setSpeed, void, float >(param0); }

	inline void Set_Hero_m_isAI(Agent* self, bool value) { ((Hero*)self)->_Get_Property_<PROPERTY_TYPE_Hero_m_isAI, bool >() = value; };
	inline const void* Get_Hero_m_isAI(Agent* self) { return &((Hero*)self)->_Get_Property_<PROPERTY_TYPE_Hero_m_isAI, bool >(); };

	inline void FunctionPointer_Hero_AdjustHeroPosition(Agent* self) { ((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_AdjustHeroPosition, void >(); }
	inline void FunctionPointer_Hero_EscapeEnemyCrash(Agent* self) { ((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_EscapeEnemyCrash, void >(); }
	inline void FunctionPointer_Hero_findAnEnemyAndAttack(Agent* self) { ((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_findAnEnemyAndAttack, void >(); }
	inline void FunctionPointer_Hero_findAnNearestEnemy(Agent* self) { ((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_findAnNearestEnemy, void >(); }
	inline bool FunctionPointer_Hero_hasEnemyInFrontCanAttack(Agent* self) { return (bool)((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_hasEnemyInFrontCanAttack, bool >(); }
	inline bool FunctionPointer_Hero_isWillBeCrashOnNearestEnemy(Agent* self) { return (bool)((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy, bool >(); }
	inline void FunctionPointer_Hero_LogMessage(char* param0) { Hero::LogMessage(param0); }
	inline bool FunctionPointer_Hero_wait20Frame(Agent* self) { return (bool)((Hero*)self)->_Execute_Method_<METHOD_TYPE_Hero_wait20Frame, bool >(); }

	inline void Set_NPC_delayTime(Agent* self, behaviac::vector<int> value) { ((NPC*)self)->delayTime = value; };
	inline const void* Get_NPC_delayTime(Agent* self) { return &((NPC*)self)->delayTime; };

	inline void Set_NPC_delayTime(Agent* self, int value, int index) { ((NPC*)self)->delayTime[index] = value; };
	inline const void* Get_NPC_delayTime(Agent* self, int index) { return &((NPC*)self)->delayTime[index]; };

	inline void Set_NPC_Level1Up_Score(Agent* self, int value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level1Up_Score, int >() = value; };
	inline const void* Get_NPC_Level1Up_Score(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level1Up_Score, int >(); };

	inline void Set_NPC_Level2Up_Score(Agent* self, int value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level2Up_Score, int >() = value; };
	inline const void* Get_NPC_Level2Up_Score(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level2Up_Score, int >(); };

	inline void Set_NPC_Level3Up_Score(Agent* self, int value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level3Up_Score, int >() = value; };
	inline const void* Get_NPC_Level3Up_Score(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level3Up_Score, int >(); };

	inline void Set_NPC_Level4Up_Score(Agent* self, int value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level4Up_Score, int >() = value; };
	inline const void* Get_NPC_Level4Up_Score(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_Level4Up_Score, int >(); };

	inline void Set_NPC_m_canBossRefresh(Agent* self, bool value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_m_canBossRefresh, bool >() = value; };
	inline const void* Get_NPC_m_canBossRefresh(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_m_canBossRefresh, bool >(); };

	inline void Set_NPC_m_level(Agent* self, int value) { ((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_m_level, int >() = value; };
	inline const void* Get_NPC_m_level(Agent* self) { return &((NPC*)self)->_Get_Property_<PROPERTY_TYPE_NPC_m_level, int >(); };

	inline int FunctionPointer_NPC_getLevel(Agent* self, int param0) { return (int)((NPC*)self)->_Execute_Method_<METHOD_TYPE_NPC_getLevel, int, int >(param0); }
	inline void FunctionPointer_NPC_LogMessage(char* param0) { NPC::LogMessage(param0); }
	inline void FunctionPointer_NPC_setLeveUpScore(Agent* self, int param0, int param1) { ((NPC*)self)->_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore, void, int, int >(param0, param1); }
	inline void FunctionPointer_NPC_spawnEnemy(Agent* self) { ((NPC*)self)->_Execute_Method_<METHOD_TYPE_NPC_spawnEnemy, void >(); }
	inline void Set_StructTest_a(Agent* self, bool value) { ((StructTest*)self)->a = value; };
	inline const void* Get_StructTest_a(Agent* self) { return &((StructTest*)self)->a; };

}
#endif // _BEHAVIAC_AGENT_PROPERTIES_H_
